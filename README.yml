---

# A typtical Fx project structure looks like this.
  fx.properties # contains fx server connection info
  project.yml   # contains test project details
  test-suites   # this directory contains one or more test suite files.



################ Sample fx.properties ################
  fx.master.url = http://localhost:8080/ # fx server url
  fx.master.accessKey = admin            # fx server accessKey/username
  fx.master.secretKey = admin123         # fx server secretkey/password
################ End of Sample fx.properties ################


################ Sample project.yml ################
  version: '1'            # fx schema version defaults to '1'.

  # test app info
  name: Fx-App-Users
  # app environments
  environments:         # environments - represents one or more instance of App (e.g. Dev, QE, Stg, Prod etc).
    - name: Default     # App environment name (Always should have one 'Default')
      baseUrl: http://localhost:8080/api/v1  # App environment Base URL
      # app access credentials
      auths:
        - name: Default                      # Auth name (Always should have one 'Default')
          authType: BASIC                    # Authorization type supported by the App (e.g. BASIC, OAuth etc)
          username: user1                    # Username or accessKey
          password: user1                    # Password or secretKey
  # job profiles
  jobs:                               # JobProfile - represents the runnable configuration
    - name: Default                          # JobProfile name (Always should have one 'Default')
      environment: Default                   # environment name from the top
      tags:                                  # tags - represents what kind of test suites you would like to run.
        - V1
      region: fx-default-queue               # region - represents the Fx Bot deployments (fx-default-queue is the default but other regions can easily be added.)

################ End of Sample project.yml ################


################ Sample test-suit file <test-suites/users_create_1.yml> ################

# endpoint - represents the API Endpoint. The base-url value comes from the project.yml file
endpoint: /users

# Suite type - SUITE or ABSTRACT 
#   ABSTRACT - is not directly excuted but can be injected into other suites as after elements.
type: SUITE

# auth - refers to auth defined in the project.yml file
# If not defined defaults to 'Default' auth.
# If auth is set to 'NONE' then no auth is used when executing requests 
auth: default

# method - represents the API http method (GET, PUT, POST, DELETE etc)
method: POST

# headers - represents request headers - when missing these two headers are auto set ('Content-Type: application/json', 'Accept: application/json')
headers:
  - 'Content-Type: application/json'
  - 'Accept: application/json'

# requets - group one or more api requests data for type (POST, PUT, DELETE etc)
request:
  - '{"name": "fn1 ln", "username": "u1", "email": "e1@fx.local", "company": "fx", "jobTitle": "Engineer"}'
  - '{"name": "fn1 ln", "username": "u1", "email": "e1@fx.local", "company": "fx", "jobTitle": "Engineer"}'
  # optional name
  - '{"name": "", "username": "u1", "email": "e1@fx.local", "company": "fx", "jobTitle": "Engineer"}'
  - '{"name": " ", "username": "u1", "email": "e1@fx.local", "company": "fx", "jobTitle": "Engineer"}'
  # optional company
  - '{"name": "", "username": "u1", "email": "e1@fx.local", "company": " ", "jobTitle": "Engineer"}'
  - '{"name": " ", "username": "u1", "email": "e1@fx.local", "company": "", "jobTitle": "Engineer"}'  
  - '{"name": "fn1 ln", "username": "u1", "email": "e1@fx.local", "company": " ", "jobTitle": "Engineer"}'
  - '{"name": "fn1 ln", "username": "u1", "email": "e1@fx.local", "company": "", "jobTitle": "Engineer"}'  
  # optional jobTitle
  - '{"name": "", "username": "u1", "email": "e1@fx.local", "company": " ", "jobTitle": ""}'
  - '{"name": " ", "username": "u1", "email": "e1@fx.local", "company": "", "jobTitle": " "}'  
  - '{"name": "fn1 ln", "username": "u1", "email": "e1@fx.local", "company": " ", "jobTitle": ""}'
  - '{"name": "fn1 ln", "username": "u1", "email": "e1@fx.local", "company": "", "jobTitle": " "}'  

# assertions - validate http response code, headers and body using variables like (@StatusCode, @Headers, @Body, @Body.id etc)
assertions:
  - "@StatusCode == 200"   
  - "@Response.errors == false"
  - "@Response.data.name == @Request.name"
  - "@Response.data.username ==IgnoreCase @Request.username"
  - "@Response.data.email == @Request.email"
  - "@Response.data.company == @Request.company"
  - "@Response.data.jobTitle == @Request.jobTitle" 

# cleanup - excutes the below abstract suites for each request.
after:
  - user_delete  

# tags - when defining job-profile in the project.yml file user can pick any tags to be part of the profile.
tags:
  - V1  

################ End of Sample test-suit file ################  
